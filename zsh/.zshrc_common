export AWS_CLI_AUTO_PROMPT=on

# aliases
alias ll="ls -larth"
alias llm="ls -larth | less -R"
alias rm='rm -i'
alias revo="ssh thesaneone@thesanerevo"
alias router="ssh root@192.168.1.1"
alias box="ssh thesaneone@thesanebox"
alias pi="ssh pi@thesanepi"
alias diskusage="du -h -d 1"
alias sshfs='sshfs -C -o reconnect,ServerAliveInterval=15,ServerAliveCountMax=3'
# newly born hostname, child or project?
alias namemaker="shuf -n 2 /usr/share/dict/words | tr -dc 'A-Za-z0-9'"
alias gitclean='git clean -fxdq'
alias gitpdiff='git diff HEAD --'
alias pwd="pwd -P"
alias gitlog="git log --graph --pretty=format:'%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias smesg="tail -f /var/log/{messages,kernel,dmesg,syslog}"
alias urlencode='python -c "import sys, urllib as ul; print(ul.quote_plus(sys.argv[1]))"'
alias urldecode='python -c "import sys, urllib as ul; print(ul.unquote_plus(sys.argv[1]))"'
alias jgrep='find . -name "*.java" -o -name "*.xml" -o -name "*.properties" -type f | xargs grep -nHi '
alias pygrep='find . -name "*.py" -o -name "*.ini" -o -name "*.yaml" -o -name "*.conf" -type f | xargs grep -nHi '
alias gogrep='find . -name "*.go" -o -name "*.ini" -o -name "*.yaml" -o -name "*.json" -type f | xargs grep -nHi '
alias jsgrep='find . -name "*.js" -o -name "*.css" -o -name "*.json" -o -name "*.html" -o -name "*.*ss" -type f | grep -v ".node_modules" | grep -v ".meteor" | xargs grep -nHi '
alias whitenoise='mpv av://lavfi:anoisesrc=color=pink'
alias scanport='nmap -p 22 --open -sV 192.168.178.0/24'
alias fpid="ps axww -o pid,user,%cpu,%mem,start,time,command | fzf | sed 's/^ *//' | cut -f1 -d' '"
command -v batcat >/dev/null 2>&1 && alias cat="batcat --paging=never" 
alias ls="ls --color"
command -v lsd >/dev/null 2>&1 && alias ls="lsd" 
alias vi="nvim" 
command -v fdfind >/dev/null 2>&1 && alias fd="fdfind" 
alias ebp='eb --profile=prod'
alias awsp='aws --profile=prod'

hvectoh264() {
    ffmpeg -xerror -hide_banner -threads 4 -i "$1"   -c:a copy -c:s copy -c:v libx264 "$2"
}
    
gitaddselective() {
    git add `git status --porcelain | grep ^" M" | cut -d " " -f3 | grep $1`
}

findandreplace() {
    find . -name "$1" -type f -print0 | xargs -0 perl -p -i -e "$2"
}

p() {
	cd $(fd . ~/src -d1 -td | fzf)
}

fcd(){
  cd "$(fd -td -H -d7 | fzf)"
}

compress_videos() {
  for file in *.mp4
  do
    ffmpeg -i $file "c-"$file -vcodec libx265 -crf 24
  done
}

docker_prune() {
	docker system df
	docker container prune
	docker image prune
}

# os specific
if [ -f ~/.profile ]; then
    source ~/.profile
fi

# work specific
if [ -f ~/.zshrc_work ]; then
    source ~/.zshrc_work
fi

# for nix pkgs
#export LOCALE_ARCHIVE_2_11="$(nix-build --no-out-link "<nixpkgs>" -A glibcLocales)/lib/locale/locale-archive"
#export LOCALE_ARCHIVE_2_27="$(nix-build --no-out-link "<nixpkgs>" -A glibcLocales)/lib/locale/locale-archive"
#export LOCALE_ARCHIVE="/usr/bin/locale"

# nix aliases
#function nix() {
#	case $* in
#		list* ) nix-env -q ;;
#		search* ) shift 1; nix-env -qas "$@" ;;
#		install* ) shift 1; nix-env -i "$@" ;;
#		uninstall* ) shift 1; nix-env --uninstall "$@" ;;
#		update* ) nix-channel --update ;;
#		upgrade* ) nix-env -u ;;
#		repair* ) nix-store --verify --check-contents --repair ;;
#		show* ) shift 1; nix-env -qa --description ".*"$@".*" ;;
#		clean* ) nix-collect-garbage -d ;;
#		** ) echo "Try nix <command>\nAvailable commands: list, search, install, uninstall, update, upgrade, repair, show, clean\n"
#	esac
#}
#
#export XDG_DATA_DIRS=$HOME/.nix-profile/share:$XDG_DATA_DIRS

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# brew sitefunctions source
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# initialise completions with ZSH's compinit
autoload -Uz compinit
compinit

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true
